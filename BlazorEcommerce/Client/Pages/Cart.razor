@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService

<MainTitle Title="سبد خرید"></MainTitle>

@if (CartProduct.Count == 0)
{
    <span>@_message</span>
}
else if (_orderPlaced)
{
    <span>Thank you for your order ! you can check your orders <a href="orders">here</a></span>
}
else
{

    <div>
        @foreach (var product in CartProduct)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" @onchange="@(e=>UpdateQuantity(e,product))" value="@product.Quantity" class="input-quantity form-control"/>
                    <button class="btn-delete" @onclick="() => RemoveProductFromCart(product.ProductId,product.ProductTypeId)">Delete</button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@CartProduct.Count) : $@CartProduct.Sum(product => product.Price * product.Quantity)
        </div>
    </div>
    @if (_isAuthenticated)
    {
        <div>
            <h5>Delivery Address</h5>
            <AddressForm/>
        </div>
    }
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}


@code {

    public List<CartProductResponse> CartProduct { get; set; } = new();
    private string _message = "Loading Cart ...";
    bool _orderPlaced;
    bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated =await AuthService.IsUserAuthenticated();
        _orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        CartProduct = await CartService.GetCartProductsAsync();
        if(CartProduct.Count == 0)
        {

            _message = "Your cart is empty .";
        }
        else
        {
            CartProduct = await CartService.GetCartProductsAsync();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e,CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value!.ToString()!);
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        _orderPlaced = true;
    }
}