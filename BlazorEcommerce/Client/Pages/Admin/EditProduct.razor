@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject JSRuntime JsRuntime

@if (Loading)
{
    <span>@Message</span>

}
else
{
    @if (PageProduct.Editing)
    {
        <h3> Edit "@PageProduct.Title"</h3>
    }
    else if (PageProduct.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="PageProduct" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="PageProduct.Title" class="form-control"></InputText>
        </div>

        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="PageProduct.ImageUrl" class="form-control"></InputText>
        </div>

        <div class="mb-0">
            <img src="@PageProduct.ImageUrl" />
        </div>

        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="PageProduct.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>

        @foreach (var variant in PageProduct.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>

                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5)" class="form-control" disabled="@variant.Deleted" />
                </div>
             
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"> Add Variant</i>
        </button>
        <hr />
        <div class="mb-0">
            <label  for="category">Category</label>
            <InputSelect id="category" @bind-Value="PageProduct.CategoryId">
                @foreach (var category in CategoryService.Categories)
                {
                    <option value="@category.Id.ToString()">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr/>
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="PageProduct.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>


        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="PageProduct.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr/>
        <button type="submit" class="btn btn-primary float-end" >@BtnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>

    @if (!PageProduct.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">Delete Product</button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    public Product PageProduct { get; set; } = null!;

    public bool Loading { get; set; } = true;
    public string BtnText { get; set; } = string.Empty;
    public string Message { get; set; } = "Loading ...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            PageProduct = new Product()
                {
                    IsNew = true
                };
        }
        else
        {
            var dbProduct = (await ProductService.GetProduct(Id)).Data!;
            if (dbProduct == null)
            {
                Message = $"Product with Id '{Id}' does not exist !";
                return;
            }
            PageProduct = dbProduct;
            PageProduct.Editing = true;
            BtnText = "Update Product";
        }

        Loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = PageProduct.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            PageProduct.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        PageProduct.Variants.Add(new ProductVariant() { IsNew = true, ProductId = Id });
    }

    async void AddOrUpdateProduct()
    {
        if (PageProduct.IsNew)
        {
            var result = await ProductService.CreateProduct(PageProduct);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            PageProduct.IsNew = false;
            PageProduct = await ProductService.UpdateProduct(PageProduct);
            NavigationManager.NavigateTo($"admin/product/{PageProduct.Id}",true);
        }

    }

    async void DeleteProduct()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete '{PageProduct.Title}' ?");

        if (confirmed)
        {
            await ProductService.DeleteProduct(PageProduct);
            NavigationManager.NavigateTo("admin/products");    
        }
        

    }
}
