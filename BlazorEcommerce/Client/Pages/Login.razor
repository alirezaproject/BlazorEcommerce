@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MainTitle Title="ورود به سایت"></MainTitle>

<h3>Login</h3>

<EditForm Model="_user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3 ">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_user.Email" class="form-control" />
        <ValidationMessage For="() => _user.Email" />
    </div>
    <div class="mb-3 ">
        <label for="password">Password</label>
        <InputText type="password" id="password" @bind-Value="_user.Password" class="form-control" />
        <ValidationMessage For="() => _user.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>


</EditForm>

<div class="text-danger">
    <span>@_errorMessage</span>
</div>

@code {
    private readonly UserLogin _user = new();
    private string _errorMessage = string.Empty;
    private string _returnUrl = string.Empty;

    protected override async Task OnInitializedAsync()
   
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is {IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("");
        }

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl",out var url))
        {
            _returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(_user);
        if (result.Success)
        {
            _errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo(_returnUrl);
        }
        else
        {
            _errorMessage = result.Message;
        }
    }

}
